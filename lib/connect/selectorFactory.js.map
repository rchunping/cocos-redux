{"version":3,"sources":["../../src/connect/selectorFactory.js"],"names":["verifySubselectors","require","impureFinalPropsSelectorFactory","mapStateToProps","mapDispatchToProps","mergeProps","dispatch","impureFinalPropsSelector","state","ownProps","pureFinalPropsSelectorFactory","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","hasRunAtLeastOnce","stateProps","dispatchProps","mergedProps","handleFirstCall","firstState","firstOwnProps","handleNewPropsAndNewState","dependsOnOwnProps","handleNewProps","handleNewState","nextStateProps","statePropsChanged","handleSubsequentCalls","nextState","nextOwnProps","propsChanged","stateChanged","pureFinalPropsSelector","module","exports","finalPropsSelectorFactory","initMapStateToProps","initMapDispatchToProps","initMergeProps","options","selectorFactory","pure"],"mappings":"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","file":"selectorFactory.js","sourcesContent":["const verifySubselectors = require('./verifySubselectors')\n  \nfunction impureFinalPropsSelectorFactory(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n  dispatch\n) {\n  return function impureFinalPropsSelector(state, ownProps) {\n    return mergeProps(\n      mapStateToProps(state, ownProps),\n      mapDispatchToProps(dispatch, ownProps),\n      ownProps\n    )\n  }\n}\n\nfunction pureFinalPropsSelectorFactory(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n  dispatch,\n  { areStatesEqual, areOwnPropsEqual, areStatePropsEqual }\n) {\n  let hasRunAtLeastOnce = false\n  let state\n  let ownProps\n  let stateProps\n  let dispatchProps\n  let mergedProps\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState\n    ownProps = firstOwnProps\n    stateProps = mapStateToProps(state, ownProps)\n    dispatchProps = mapDispatchToProps(dispatch, ownProps)\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    hasRunAtLeastOnce = true\n    return mergedProps\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps)\n\n    if (mapDispatchToProps.dependsOnOwnProps)\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    return mergedProps\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps)\n      stateProps = mapStateToProps(state, ownProps)\n\n    if (mapDispatchToProps.dependsOnOwnProps)\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    return mergedProps\n  }\n\n  function handleNewState() {\n    const nextStateProps = mapStateToProps(state, ownProps)\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps)\n    stateProps = nextStateProps\n    \n    if (statePropsChanged)\n      mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n    return mergedProps\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    // console.log(state)\n    // console.log(ownProps)\n    // console.log(stateProps)\n    // console.log(dispatchProps)\n    // console.log(mergedProps)\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)\n    const stateChanged = !areStatesEqual(nextState, state)\n    state = nextState\n    ownProps = nextOwnProps\n\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState()\n    if (propsChanged) return handleNewProps()\n    if (stateChanged) return handleNewState()\n    return mergedProps\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce\n      ? handleSubsequentCalls(nextState, nextOwnProps)\n      : handleFirstCall(nextState, nextOwnProps)\n  }\n}\n\n// TODO: Add more comments\n\n// If pure is true, the selector returned by selectorFactory will memoize its results,\n// allowing connectAdvanced's shouldComponentUpdate to return false if final\n// props have not changed. If false, the selector will always return a new\n// object and shouldComponentUpdate will always return true.\n\nmodule.exports = function finalPropsSelectorFactory(dispatch, {\n  initMapStateToProps,\n  initMapDispatchToProps,\n  initMergeProps,\n  ...options\n}) {\n  const mapStateToProps = initMapStateToProps(dispatch, options)\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options)\n  const mergeProps = initMergeProps(dispatch, options)\n\n  // if (process.env.NODE_ENV !== 'production') {\n  //   verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName)\n  // }\n\n  const selectorFactory = options.pure\n    ? pureFinalPropsSelectorFactory\n    : impureFinalPropsSelectorFactory\n\n  return selectorFactory(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps,\n    dispatch,\n    options\n  )\n}\n"]}