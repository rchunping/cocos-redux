{"version":3,"sources":["../../src/utils/Subscription.js"],"names":["CLEARED","nullListeners","notify","createListenerCollection","current","next","clear","listeners","i","length","get","subscribe","listener","isSubscribed","slice","push","unsubscribe","splice","indexOf","module","exports","store","parentSub","onStateChange","trySubscribe","Boolean","addNestedSub"],"mappings":";;;;;;AAAA;AACA;AACA;;AAEA,IAAMA,UAAU,IAAhB;AACA,IAAMC,gBAAgB;AAAEC,QAAF,oBAAW,CAAE;AAAb,CAAtB;;AAEA,SAASC,wBAAT,GAAoC;AAClC;AACA;AACA,MAAIC,UAAU,EAAd;AACA,MAAIC,OAAO,EAAX;;AAEA,SAAO;AACLC,SADK,mBACG;AACND,aAAOL,OAAP;AACAI,gBAAUJ,OAAV;AACD,KAJI;AAMLE,UANK,oBAMI;AACP,UAAMK,YAAYH,UAAUC,IAA5B;AACA,WAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAID,UAAUE,MAA9B,EAAsCD,GAAtC,EAA2C;AACzCD,kBAAUC,CAAV;AACD;AACF,KAXI;AAaLE,OAbK,iBAaC;AACJ,aAAOL,IAAP;AACD,KAfI;AAiBLM,aAjBK,qBAiBKC,QAjBL,EAiBe;AAClB,UAAIC,eAAe,IAAnB;AACA,UAAIR,SAASD,OAAb,EAAsBC,OAAOD,QAAQU,KAAR,EAAP;AACtBT,WAAKU,IAAL,CAAUH,QAAV;;AAEA,aAAO,SAASI,WAAT,GAAuB;AAC5B,YAAI,CAACH,YAAD,IAAiBT,YAAYJ,OAAjC,EAA0C;AAC1Ca,uBAAe,KAAf;;AAEA,YAAIR,SAASD,OAAb,EAAsBC,OAAOD,QAAQU,KAAR,EAAP;AACtBT,aAAKY,MAAL,CAAYZ,KAAKa,OAAL,CAAaN,QAAb,CAAZ,EAAoC,CAApC;AACD,OAND;AAOD;AA7BI,GAAP;AA+BD;;AAEDO,OAAOC,OAAP;AACE,wBAAYC,KAAZ,EAAmBC,SAAnB,EAA8BC,aAA9B,EAA6C;AAAA;;AAC3C,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKP,WAAL,GAAmB,IAAnB;AACA,SAAKT,SAAL,GAAiBN,aAAjB;AACD;;AAPH;AAAA;AAAA,iCASeW,QATf,EASyB;AACrB,WAAKY,YAAL;AACA,aAAO,KAAKjB,SAAL,CAAeI,SAAf,CAAyBC,QAAzB,CAAP;AACD;AAZH;AAAA;AAAA,uCAcqB;AACjB,WAAKL,SAAL,CAAeL,MAAf;AACD;AAhBH;AAAA;AAAA,mCAkBiB;AACb,aAAOuB,QAAQ,KAAKT,WAAb,CAAP;AACD;AApBH;AAAA;AAAA,mCAsBiB;AACb,UAAI,CAAC,KAAKA,WAAV,EAAuB;AACrB,aAAKA,WAAL,GAAmB,KAAKM,SAAL,GACf,KAAKA,SAAL,CAAeI,YAAf,CAA4B,KAAKH,aAAjC,CADe,GAEf,KAAKF,KAAL,CAAWV,SAAX,CAAqB,KAAKY,aAA1B,CAFJ;;AAIA,aAAKhB,SAAL,GAAiBJ,0BAAjB;AACD;AACF;AA9BH;AAAA;AAAA,qCAgCmB;AACf,UAAI,KAAKa,WAAT,EAAsB;AACpB,aAAKA,WAAL;AACA,aAAKA,WAAL,GAAmB,IAAnB;AACA,aAAKT,SAAL,CAAeD,KAAf;AACA,aAAKC,SAAL,GAAiBN,aAAjB;AACD;AACF;AAvCH;;AAAA;AAAA","file":"Subscription.js","sourcesContent":["// encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nconst CLEARED = null\nconst nullListeners = { notify() {} }\n\nfunction createListenerCollection() {\n  // the current/next pattern is copied from redux's createStore code.\n  // TODO: refactor+expose that code to be reusable here?\n  let current = []\n  let next = []\n\n  return {\n    clear() {\n      next = CLEARED\n      current = CLEARED\n    },\n\n    notify() {\n      const listeners = current = next\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i]()\n      }\n    },\n\n    get() {\n      return next\n    },\n\n    subscribe(listener) {\n      let isSubscribed = true\n      if (next === current) next = current.slice()\n      next.push(listener)\n\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return\n        isSubscribed = false\n\n        if (next === current) next = current.slice()\n        next.splice(next.indexOf(listener), 1)\n      }\n    }\n  }\n}\n\nmodule.exports = class Subscription {\n  constructor(store, parentSub, onStateChange) {\n    this.store = store\n    this.parentSub = parentSub\n    this.onStateChange = onStateChange\n    this.unsubscribe = null\n    this.listeners = nullListeners\n  }\n\n  addNestedSub(listener) {\n    this.trySubscribe()\n    return this.listeners.subscribe(listener)\n  }\n\n  notifyNestedSubs() {\n    this.listeners.notify()\n  }\n\n  isSubscribed() {\n    return Boolean(this.unsubscribe)\n  }\n\n  trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub\n        ? this.parentSub.addNestedSub(this.onStateChange)\n        : this.store.subscribe(this.onStateChange)\n \n      this.listeners = createListenerCollection()\n    }\n  }\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe()\n      this.unsubscribe = null\n      this.listeners.clear()\n      this.listeners = nullListeners\n    }\n  }\n}\n"]}